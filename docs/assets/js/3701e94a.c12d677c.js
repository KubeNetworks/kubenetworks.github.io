"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[825],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:6},i="Dev mode in local \ud83d\udc33",s={unversionedId:"functions/dev_mode_in_local",id:"functions/dev_mode_in_local",title:"Dev mode in local \ud83d\udc33",description:"Run the Kubernetes pod in the local Docker container, and cooperate with the service mesh to intercept the traffic with",source:"@site/docs/functions/dev_mode_in_local.md",sourceDirName:"functions",slug:"/functions/dev_mode_in_local",permalink:"/kubevpn-docs/docs/functions/dev_mode_in_local",draft:!1,editUrl:"https://github.com/KubeNetworks/kubevpn-docs/tree/master/website/docs/docs/functions/dev_mode_in_local.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"functions",previous:{title:"Reverse proxy with mesh",permalink:"/kubevpn-docs/docs/functions/reverse_proxy_with_mesh"},next:{title:"DinD ( Docker in Docker ) use kubevpn in Docker",permalink:"/kubevpn-docs/docs/functions/dind"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dev-mode-in-local-"},"Dev mode in local \ud83d\udc33"),(0,o.kt)("p",null,"Run the Kubernetes pod in the local Docker container, and cooperate with the service mesh to intercept the traffic with\nthe specified header to the local, or all the traffic to the local."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"\u279c  ~ kubevpn -n kube-system --headers a=1 -p 9080:9080 -p 80:80 dev deployment/authors\ngot cidr from cache\nupdate ref count successfully\ntraffic manager already exist, reuse it\nWaiting for deployment \"authors\" rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment \"authors\" rollout to finish: 1 old replicas are pending termination...\ndeployment \"authors\" successfully rolled out\nport forward ready\ntunnel connected\ndns service ok\ntar: removing leading '/' from member names\n/var/folders/4_/wt19r8113kq_mfws8sb_w1z00000gn/T/3264799524258261475:/var/run/secrets/kubernetes.io/serviceaccount\ntar: Removing leading '/' from member names\ntar: Removing leading '/' from hard link targets\n/var/folders/4_/wt19r8113kq_mfws8sb_w1z00000gn/T/4472770436329940969:/var/run/secrets/kubernetes.io/serviceaccount\ntar: Removing leading '/' from member names\ntar: Removing leading '/' from hard link targets\n/var/folders/4_/wt19r8113kq_mfws8sb_w1z00000gn/T/359584695576599326:/var/run/secrets/kubernetes.io/serviceaccount\nCreated container: authors_kube-system_kubevpn_a7d82\nWait container authors_kube-system_kubevpn_a7d82 to be running...\nContainer authors_kube-system_kubevpn_a7d82 is running on port 9080/tcp:32771 now\nCreated container: nginx_kube-system_kubevpn_a7d82\nWait container nginx_kube-system_kubevpn_a7d82 to be running...\nContainer nginx_kube-system_kubevpn_a7d82 is running now\n/opt/microservices # ls\napp\n/opt/microservices # ps -ef\nPID   USER     TIME  COMMAND\n    1 root      0:00 ./app\n   10 root      0:00 nginx: master process nginx -g daemon off;\n   32 root      0:00 /bin/sh\n   44 101       0:00 nginx: worker process\n   45 101       0:00 nginx: worker process\n   46 101       0:00 nginx: worker process\n   47 101       0:00 nginx: worker process\n   49 root      0:00 ps -ef\n/opt/microservices # apk add curl\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/x86_64/APKINDEX.tar.gz\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/x86_64/APKINDEX.tar.gz\n(1/4) Installing brotli-libs (1.0.9-r5)\n(2/4) Installing nghttp2-libs (1.43.0-r0)\n(3/4) Installing libcurl (7.79.1-r5)\n(4/4) Installing curl (7.79.1-r5)\nExecuting busybox-1.33.1-r3.trigger\nOK: 8 MiB in 19 packages\n/opt/microservices # curl localhost:9080\n404 page not found\n/opt/microservices # curl localhost:9080/health\n{\"status\":\"Authors is healthy\"}/opt/microservices # exit\nprepare to exit, cleaning up\nupdate ref count successfully\nclean up successful\n")),(0,o.kt)("p",null,"You can see that it will start up two containers with docker, mapping to pod two container, and share port with same\nnetwork, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:port"),"\nto access another container. And more, all environment\u3001volume and network are the same as remote kubernetes pod, it is\ntruly consistent with the kubernetes runtime. Makes develop on local PC comes true."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'\u279c  ~ docker ps\nCONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS                                        NAMES\nde9e2f8ab57d        nginx:latest            "/docker-entrypoint.\u2026"   5 seconds ago       Up 5 seconds                                                     nginx_kube-system_kubevpn_e21d8\n28aa30e8929e        naison/authors:latest   "./app"                  6 seconds ago       Up 5 seconds        0.0.0.0:80->80/tcp, 0.0.0.0:9080->9080/tcp   authors_kube-system_kubevpn_e21d8\n\u279c  ~\n')),(0,o.kt)("p",null,"If you want to specify the image to start the container locally, you can use the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"--docker-image"),". When the\nimage does not exist locally, it will be pulled from the corresponding mirror warehouse. If you want to specify startup\nparameters, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"--entrypoint")," parameter, replace it with the command you want to execute, such\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"--entrypoint /bin/bash"),", for more parameters, see ",(0,o.kt)("inlineCode",{parentName:"p"},"kubevpn dev --help"),"."))}d.isMDXComponent=!0}}]);